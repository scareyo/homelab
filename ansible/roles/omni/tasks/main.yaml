---
- name: 'Check mandatory variables are defined'
  ansible.builtin.assert:
    that:
      - omni_talos_version is defined
      - omni_kubernetes_version is defined
      - omni_cluster_name is defined
      - omni_infisical_client_id is defined
      - omni_infisical_client_secret is defined

- name: Get machine status
  ansible.builtin.shell: |-
    set -o pipefail;
    omnictl get machinestatus -o yaml | yq -o json -I 0 'select(.spec.network.hostname == "{{ item }}") |
    {
      "id": .metadata.id,
      "name": "{{ item }}",
      "disk": "{{ hostvars[item].osdisk | default('') | quote }}",
      "groups": {{ hostvars[item].group_names | to_json }},
      "platform": .spec.platformmetadata.platform
    }'
  changed_when: false
  loop: "{{ groups[omni_cluster_name] }}"
  register: output

- name: Set machine status fact
  ansible.builtin.set_fact:
    machines: >
      {{ machines | default([]) + [item.stdout | from_json] }}
  with_items: "{{ output.results }}"

- name: Generate cluster definition
  ansible.builtin.template:
    src: cluster.yaml.j2
    dest: "{{ role_path }}/files/data/cluster.yaml"
    mode: "0600"

- name: Validate cluster definition
  ansible.builtin.command: "omnictl cluster template validate -f {{ role_path }}/files/data/cluster.yaml"
  changed_when: false

- name: Create cluster
  ansible.builtin.command: "omnictl cluster template sync -f {{ role_path }}/files/data/cluster.yaml"
  changed_when: true

- name: Wait for healthy cluster
  ansible.builtin.command: "omnictl cluster template status --wait 10m -f {{ role_path }}/files/data/cluster.yaml"
  changed_when: false

- name: Configure Kubernetes service account
  ansible.builtin.command: "omnictl kubeconfig --force --service-account -c {{ omni_cluster_name }} --user ansible {{ role_path }}/files/data/kubeconfig"
  changed_when: false

- name: Get Argo CD status
  ansible.builtin.uri:
    url: https://argocd.apps.int.scarey.me/healthz
    return_content: true
    validate_certs: false
  ignore_errors: true
  register: result

- name: Bootstrap Cluster
  when: result is defined and result.status != 200
  block:
    - name: Create External Secrets namespace
      kubernetes.core.k8s:
        name: external-secrets
        api_version: v1
        kind: Namespace
        kubeconfig: "{{ role_path }}/files/data/kubeconfig"
        state: present

    - name: Add Infisical secret
      kubernetes.core.k8s:
        name: infisical-credentials
        namespace: external-secrets
        api_version: v1
        kind: Secret
        definition:
          stringData:
            clientId: "{{ omni_infisical_client_id }}"
            clientSecret: "{{ omni_infisical_client_secret }}"
        kubeconfig: "{{ role_path }}/files/data/kubeconfig"
        state: present

    - name: Install Argo CD
      kubernetes.core.helm:
        name: bootstrap
        chart_ref: argo-cd
        chart_version: 8.2.4
        chart_repo_url: https://argoproj.github.io/argo-helm
        release_namespace: argocd
        create_namespace: true
        values:
          configs:
            cm:
              annotations:
                helm.sh/resource-policy: keep
            secret:
              annotations:
                helm.sh/resource-policy: keep
          notifications:
            secret:
              annotations:
                helm.sh/resource-policy: keep
        values_files:
          - "{{ playbook_dir }}/../k8s/infrastructure/argocd/values.yaml"
      register: template

    - name: Install App of Apps
      kubernetes.core.helm:
        name: base
        chart_ref: "{{ playbook_dir }}/../k8s/infrastructure/base"
        release_namespace: argocd
        values_files:
          - "{{ playbook_dir }}/../k8s/infrastructure/base/values.yaml"
        kubeconfig: "{{ role_path }}/files/data/kubeconfig"
