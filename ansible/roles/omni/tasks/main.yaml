---
- name: 'Check mandatory variables are defined'
  ansible.builtin.assert:
    that:
      - omni_talos_version is defined
      - omni_kubernetes_version is defined
      - omni_cluster_name is defined
      - omni_endpoint is defined
      - omni_service_account_key is defined

- name: Get machine status
  environment:
    OMNI_ENDPOINT: "{{ omni_endpoint }}"
    OMNI_SERVICE_ACCOUNT_KEY: "{{ omni_service_account_key }}"
  ansible.builtin.shell: |-
    set -o pipefail;
    omnictl get machinestatus -o yaml | yq -o json -I 0 'select(.spec.network.hostname == "{{ item }}") |
    {
      "id": .metadata.id,
      "name": "{{ item }}",
      "disk": "{{ hostvars[item].osdisk | default('') | quote }}",
      "groups": {{ hostvars[item].group_names | to_json }},
      "platform": .spec.platformmetadata.platform
    }'
  changed_when: false
  loop: "{{ groups[omni_cluster_name] }}"
  register: output

- name: Set machine status fact
  ansible.builtin.set_fact:
    machines: >
      {{ machines | default([]) + [item.stdout | from_json] }}
  with_items: "{{ output.results }}"

- name: Generate cluster definition
  ansible.builtin.template:
    src: cluster.yaml.j2
    dest: "{{ role_path }}/files/data/cluster.yaml"
    mode: "0600"

- name: Validate cluster definition
  environment:
    OMNI_ENDPOINT: "{{ omni_endpoint }}"
    OMNI_SERVICE_ACCOUNT_KEY: "{{ omni_service_account_key }}"
  ansible.builtin.command: "omnictl cluster template validate -f {{ role_path }}/files/data/cluster.yaml"
  changed_when: false

- name: Sync cluster
  ansible.builtin.command: "omnictl cluster template sync -f {{ role_path }}/files/data/cluster.yaml"
  register: output
  changed_when: output.stdout != ''

- name: Wait for healthy cluster
  ansible.builtin.command: "omnictl cluster template status --wait 10m -f {{ role_path }}/files/data/cluster.yaml"
  changed_when: false
