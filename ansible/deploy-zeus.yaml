---
- name: Provision zeus
  hosts: localhost
  connection: local
  tasks:
    - name: Create server
      hetzner.hcloud.server:
        name: zeus
        server_type: cpx11
        image: alma-9
        location: ash
        ssh_keys:
          - scarey
        ipv4: zeus
        user_data: |
          #cloud-config
          package_update: true
          users:
            - name: scarey
              groups:
                - wheel
              shell: /bin/bash
              sudo:
                - ALL=(ALL) NOPASSWD:ALL
              ssh_authorized_keys:
                - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIChdQW4k6/5G12/6y68bH0QBeuvL9tb2uVAi/ILzfxCH
            - name: pangolin
              shell: /bin/bash
          packages:
            - dnf-automatic
            - systemd-resolved
            - haproxy
          runcmd:
            - [ systemctl, enable, --now, dnf-automatic.timer ]
            - [ systemctl, enable, --now, systemd-resolved.service ]
            - [ loginctl, enable-linger, pangolin ]
        state: started
      register: zeus

    - name: Wait for SSH to be available
      ansible.builtin.wait_for:
        port: 22
        host: "{{ zeus.hcloud_server.ipv4_address }}"
        delay: 5
      connection: local

- name: Configure zeus
  hosts: zeus
  become: true
  vars:
    secrets: "{{ lookup('infisical.vault.read_secrets', env_slug='prod', project_id='64853e11f7a9ba1c4ac21cfd', path='/') | items2dict }}"
  roles:
    #- role: authentik
    - role: pangolin

 #  vars:
#    secrets: "{{ lookup('infisical.vault.read_secrets', env_slug='prod', project_id='64853e11f7a9ba1c4ac21cfd', path='/') | items2dict }}"
#  tasks:
#    - name: Install Podman
#      package:
#        name: podman
#        state: present
#
#    - name: Create omni.asc
#      ansible.builtin.copy:
#        content: "{{ secrets.OMNI_PGP_PRIVATE_KEY }}"
#        dest: "./omni.asc"
#
#    - name: Create Omni
#      containers.podman.podman_container:
#        name: omni
#        state: started
#        restart_policy: unless-stopped
#        network: host
#        cap_add:
#          - NET_ADMIN
#        device: "/dev/net/tun"
#        volumes:
#          - $PWD/etcd:/_out/etcd
#          - $PWD/omni.asc
#        image: ghcr.io/siderolabs/omni:v0.50.1
#        command:
#          - --account-id=$(uuidgen)
#          - --name=onprem-omni
#          #- --cert=/tls.crt
#          #- --key=/tls.key
#          #- --siderolink-api-cert=/tls.crt
#          #- --siderolink-api-key=/tls.key
#          - --private-key-source=file:///omni.asc
#          - --event-sink-port=8091
#          - --bind-addr=0.0.0.0:443
#          - --siderolink-api-bind-addr=0.0.0.0:8090
#          - --k8s-proxy-bind-addr=0.0.0.0:8100
#          - --advertised-api-url=http://omni.scarey.me/
#          - --siderolink-api-advertised-url=http://omni.scarey.me:8090/
#          - --siderolink-wireguard-advertised-addr={{ zeus.hcloud_server.ipv4_address }}:50180
#          - --advertised-kubernetes-proxy-url=http://omni.scarey.me:8100/
#          #- --auth-auth0-enabled=true
#          #- --auth-auth0-domain=<Auth0 domain>
#          #- --auth-auth0-client-id=<Auth0 client ID>
#          - --initial-users=<email address>

#    - role: githubixx.ansible_role_wireguard
#  tasks:
#    - name: Set DNS nameservers
#      ansible.builtin.blockinfile:
#        path:gcetc/resolv.conf
#        block: |
#          nameserver {{ wireguard_dns }}
#
#    - name: Configure haproxy
#      ansible.builtin.copy:
#        dest:gcetc/haproxy/haproxy.cfg
#        mode: "0644"
#        content: |
#          global
#            log         127.0.0.1 local2
#
#            chroot     gcvar/lib/haproxy
#            pidfile    gcvar/run/haproxy.pid
#            maxconn     4000
#            user        haproxy
#            group       haproxy
#            daemon
#
#            stats socketgcvar/lib/haproxy/stats
#
#            ssl-default-bind-ciphers PROFILE=SYSTEM
#            ssl-default-server-ciphers PROFILE=SYSTEM
#
#          defaults
#            mode                    tcp
#            log                     global
#            option                  httplog
#            option                  dontlognull
#            option http-server-close
#            option forwardfor       except 127.0.0.0/8
#            option                  redispatch
#            option                  tcplog
#            retries                 3
#            timeout http-request    10s
#            timeout queue           1m
#            timeout connect         10s
#            timeout client          1m
#            timeout server          1m
#            timeout http-keep-alive 10s
#            timeout check           10s
#            maxconn                 3000
#
#          frontend main
#            bind *:443
#            mode tcp
#            default_backend seraphim
#
#          backend seraphim
#            mode tcp
#            server seraphim 10.10.21.12:443
#
#    - name: Reload haproxy
#      ansible.builtin.service:
#        name: haproxy
#        state: reloaded
